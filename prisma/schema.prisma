generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model refresh_token {
  id           Int       @id @default(autoincrement())
  idUser       Int
  refreshToken String    @db.VarChar(500)
  creationDate DateTime  @default(now()) @db.DateTime(0)
  updateDate   DateTime? @db.DateTime(0)
  isDeleted    Boolean   @default(false)
  deleteDate   DateTime? @db.DateTime(0)
  user         user      @relation(fields: [idUser], references: [id], onUpdate: Restrict, map: "FK_user_TO_user_refresh_token")

  @@index([idUser], map: "FK_user_TO_refresh_token")
}

model role {
  id           Int         @id @default(autoincrement())
  label        String      @db.VarChar(50)
  creationDate DateTime    @default(now()) @db.DateTime(0)
  updateDate   DateTime?   @db.DateTime(0)
  isDeleted    Boolean     @default(false)
  deleteDate   DateTime?   @db.DateTime(0)
  user_role    user_role[]
}

model team {
  id           Int         @id @default(autoincrement())
  label        String?     @db.VarChar(50)
  creationDate DateTime    @default(now()) @db.DateTime(0)
  updateDate   DateTime?   @db.DateTime(0)
  isDeleted    Boolean     @default(false)
  deleteDate   DateTime?   @db.DateTime(0)
  user_team    user_team[]
}

model user {
  id            Int             @id @default(autoincrement())
  email         String          @db.VarChar(50)
  alias         String          @db.VarChar(30)
  password      String          @db.VarChar(150)
  creationDate  DateTime        @default(now()) @db.DateTime(0)
  updateDate    DateTime?       @db.DateTime(0)
  isDeleted     Boolean         @default(false)
  deleteDate    DateTime?       @db.DateTime(0)
  refresh_token refresh_token[]
  user_role     user_role[]
  user_team     user_team[]
}

model user_role {
  id     Int  @id @default(autoincrement())
  idUser Int
  idRole Int
  role   role @relation(fields: [idRole], references: [id], onUpdate: Restrict, map: "FK_role_TO_user_role")
  user   user @relation(fields: [idUser], references: [id], onUpdate: Restrict, map: "FK_user_TO_user_role")

  @@index([idRole], map: "FK_role_TO_user_role")
  @@index([idUser], map: "FK_user_TO_user_role")
}

model user_team {
  id     Int  @id @default(autoincrement())
  idUser Int
  idTeam Int
  team   team @relation(fields: [idTeam], references: [id], onUpdate: Restrict, map: "FK_team_TO_user_team")
  user   user @relation(fields: [idUser], references: [id], onUpdate: Restrict, map: "FK_user_TO_user_team")

  @@index([idTeam], map: "FK_team_TO_user_team")
  @@index([idUser], map: "FK_user_TO_user_team")
}

model genre {
  id           Int           @id @default(autoincrement())
  label        String        @db.VarChar(50)
  idIMBD       Int
  creationDate DateTime      @default(now()) @db.DateTime(0)
  updateDate   DateTime?     @db.DateTime(0)
  isDeleted    Boolean       @default(false)
  deleteDate   DateTime?     @db.DateTime(0)
  genre_movie  genre_movie[]
}

model genre_movie {
  id           Int       @id @default(autoincrement())
  idGenre      Int
  idMovie      Int
  creationDate DateTime  @default(now()) @db.DateTime(0)
  updateDate   DateTime? @db.DateTime(0)
  isDeleted    Boolean   @default(false)
  deleteDate   DateTime? @db.DateTime(0)
  movie        movie     @relation(fields: [idMovie], references: [id], onUpdate: Restrict, map: "FK_movie_TO_genre_movie")
  genre        genre     @relation(fields: [idGenre], references: [id], onUpdate: Restrict, map: "FK_user_TO_genre_movie")

  @@index([idGenre], map: "FK_genre_TO_genre_movie")
  @@index([idMovie], map: "FK_movie_TO_genre_movie")
}

model movie {
  id                Int           @id @default(autoincrement())
  genre             Int
  idIMBD            Int
  original_language String        @db.VarChar(50)
  originalTitle     String?       @db.VarChar(50)
  overview          String?       @db.VarChar(500)
  posterPath        String?       @db.VarChar(500)
  releaseDate       DateTime?     @db.DateTime(0)
  viewDate          DateTime?     @db.DateTime(0)
  review            String?       @db.VarChar(500)
  rating            Float?        @db.Float
  creationDate      DateTime      @default(now()) @db.DateTime(0)
  updateDate        DateTime?     @db.DateTime(0)
  isDeleted         Boolean       @default(false)
  deleteDate        DateTime?     @db.DateTime(0)
  genre_movie       genre_movie[]
}
